#!/bin/bash

# -------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Original Source:
# https://github.com/logsearch/logsearch-boshrelease
# -------------------------------------------------------------------

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the ctl script
source /var/vcap/jobs/graphite-api/helpers/ctl_setup.sh 'graphite-api'

# Log some info to the Monit Log file
function log {
    local message=${1}
    local timestamp=`date +%y:%m:%d-%H:%M:%S`
    echo "${timestamp} :: ${message}" >> "/var/vcap/sys/log/monit/graphite-api.log"
}

# Python dlopen does not pay attention to LD_LIBRARY_PATH, so
# ctypes.util.find_library is not able to find dyn libs, the only
# way to do is by defining the folders in ldconfig
function ldconf {
    local path=${1}

    echo "$path" | tr ':' '\n' > $TMP_DIR/ld.so.conf
    ldconfig -f $TMP_DIR/ld.so.conf
    rm -f $TMP_DIR/ld.so.conf
}

case $1 in
  start)
    log "Starting graphite-api gunicorn"
    pid_guard $PIDFILE $JOB_NAME
    echo $$ > $PIDFILE
    ldconf $LD_LIBRARY_PATH
    exec chpst -u vcap:vcap "${JOB_DIR}/packages/gunicorn/bin/gunicorn" \
        graphite_api.app:app --threads $THREADS -w $WORKERS -b $BIND_ADDR:$BIND_PORT \
        --keep-alive 2 \
        --timeout 30 \
        --max-requests 0 \
        --worker-connections 1000 \
        >>$LOG_DIR/$JOB_NAME.stdout.log \
        2>>$LOG_DIR/$JOB_NAME.stderr.log
    ;;
  stop)
    log "Stopping graphite-api gunicorn"
    kill_and_wait $PIDFILE
    ;;
  *)
    echo "Usage: graphite-api {start|stop}"
    ;;
esac
exit 0
